    def _perfil_usuari(self, usuari, tfidf_matrix):
        matrix_aux=[]   
        sumatorio=self._valoraciones[usuari].sum()
        for columna, fila in zip(range(self._columnas), tfidf_matrix):
            valoracion=self._valoraciones[usuari, columna]
            vector_mult=valoracion*fila
            matrix_aux.append((vector_mult))
        matrix_aux=np.array(matrix_aux)
        #matrix_aux=lil_matrix(matrix_aux)
        return matrix_aux.sum(axis=0)/sumatorio
    
    
            
    def _puntuacion_final(self, usuari, perfil_usuari, tfidi_matrix):
        perfil=transpose(perfil_usuari)
        puntuaciones=tfidi_matrix.dot(perfil)
        sumatorio1=[]
        matriz_usuario_elementos_cuadrados=np.multiply(perfil, perfil)
        sumatorio1=matriz_usuario_elementos_cuadrados.sum(axis=0)
        for i in range(tfidi_matrix.shape[0]):
            for j in range(tfidi_matrix.shape[1]):
                tfidi_matrix[i,j]=tfidi_matrix[i,j]**2                
        for i in range(puntuaciones.shape[0]):
            divisor=((sumatorio1)**(1/2))*((tfidi_matrix[i]).sum())**(1/2)
            puntuaciones[i]=puntuaciones[i]/divisor
        return puntuaciones*5
            
    def _tfidf_matrix(self):
        item_features = [
            self._elementos[0][i].caract_to_str() for i in range(self._columnas)
        ]
        tfidf = TfidfVectorizer(stop_words="english")
        tfidf_matrix = tfidf.fit_transform(item_features).toarray()
        return tfidf_matrix

    def because_you_liked(self, usuari: int):
        tfidf_matrix = lil_matrix(self._tfidf_matrix())
        user_u = self._valoraciones.getrow(usuari)
        perfil_usuari=self._perfil_usuari(usuari, tfidf_matrix)
        puntuaciones=self._puntuacion_final(usuari, perfil_usuari, tfidf_matrix)
        return sorted(
            [
                (self._elementos[0][i], puntuaciones[i][0])
                for i in puntuaciones.nonzero()[0]
                if i not in list(user_u.nonzero()[1])
            ],
            key=lambda x: x[1],
            reverse=True,)
